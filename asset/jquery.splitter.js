/**
 * Minified by jsDelivr using UglifyJS v3.3.27.
 * Original file: /npm/jquery.splitter@0.27.1/js/jquery.splitter.js
 * 
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
!function (m, b) { var z = 0, w = null, _ = [], U = null; m.fn.split = function (t) { var l, a, i = this.data("splitter"); if (i) return i; var e, h = m.extend({ limit: 100, orientation: "horizontal", position: "50%", invisible: !1, onDragStart: m.noop, onDragEnd: m.noop, onDrag: m.noop, percent: !1 }, t || {}); this.settings = h; var n = this.children(); "vertical" == h.orientation ? (l = n.first().addClass("left_panel"), a = l.next().addClass("right_panel"), e = "vsplitter") : "horizontal" == h.orientation && (l = n.first().addClass("top_panel"), a = l.next().addClass("bottom_panel"), e = "hsplitter"), h.invisible && (e += " splitter-invisible"); var r = this.width(), o = this.height(), s = z++; this.addClass("splitter_panel"); var p, u = m("<div/>").addClass(e).bind("mouseenter touchstart", function () { w = s }).bind("mouseleave touchend", function () { w = null }).insertAfter(l); function g(t) { if ("number" == typeof t) return t; if ("string" == typeof t) { var i = t.match(/^([0-9\.]+)(px|%)$/); if (i) { if ("px" == i[2]) return +i[1]; if ("vertical" == h.orientation) return r * +i[1] / 100; if ("horizontal" == h.orientation) return o * +i[1] / 100 } } } var d, c, f = m.extend(this, { refresh: function () { var t = this.width(), i = this.height(); r == t && o == i || (r = this.width(), o = this.height(), f.position(p)) }, option: function (t, i) { return "position" === t ? f.position(i) : void 0 === i ? h[t] : (h[t] = i, f) }, position: "vertical" == h.orientation ? function (t, i) { if (t === b) return p; p = g(t); var e, n = u.width(), r = n / 2, o = f.width(); if (h.invisible) e = l.width(p).outerWidth(), a.width(o - e), u.css("left", e - r); else if (h.percent) { var s = (p - r) / o * 100; e = l.css("width", s + "%").outerWidth(), a.css("width", (o - e - n) / o * 100 + "%"), u.css("left", e / o * 100 + "%") } else e = l.css("width", p - r).outerWidth(), a.width(o - e - n), u.css("left", e); return l.find(".splitter_panel").eq(0).height(f.height()), a.find(".splitter_panel").eq(0).height(f.height()), i || (f.trigger("splitter.resize"), f.find(".splitter_panel").trigger("splitter.resize")), f } : "horizontal" == h.orientation ? function (t, i) { if (t === b) return p; p = g(t); var e, n = u.height(), r = n / 2, o = f.height(); if (h.invisible) e = l.height(p).outerHeight(), a.height(o - e), u.css("top", e - r); else if (h.percent) { var s = (p - r) / o * 100; e = l.css("height", s + "%").outerHeight(), a.css("height", (o - e - n) / o * 100 + "%"), u.css("top", e / o * 100 + "%") } else e = l.height(p - r).outerHeight(), a.height(o - e - n), u.css("top", e); return i || (f.trigger("splitter.resize"), f.find(".splitter_panel").trigger("splitter.resize")), f } : m.noop, orientation: h.orientation, limit: (d = h.limit, !isNaN(parseFloat(d)) && isFinite(d) ? { leftUpper: d, rightBottom: d } : d), isActive: function () { return w === s }, destroy: function () { f.removeClass("splitter_panel"), u.unbind("mouseenter"), u.unbind("mouseleave"), u.unbind("touchstart"), u.unbind("touchmove"), u.unbind("touchend"), u.unbind("touchleave"), u.unbind("touchcancel"), "vertical" == h.orientation ? (l.removeClass("left_panel"), a.removeClass("right_panel")) : "horizontal" == h.orientation && (l.removeClass("top_panel"), a.removeClass("bottom_panel")), f.unbind("splitter.resize"), f.trigger("splitter.resize"), f.find(".splitter_panel").trigger("splitter.resize"), _[s] = null, z--, u.remove(), f.removeData("splitter"); for (var t = !1, i = _.length; i--;)if (null !== _[i]) { t = !0; break } t || (m(document.documentElement).unbind(".splitter"), m(window).unbind("resize.splitter"), _ = [], z = 0) } }); f.bind("splitter.resize", function (t) { var i = f.position(); "vertical" == f.orientation && i > f.width() ? i = f.width() - f.limit.rightBottom - 1 : "horizontal" == f.orientation && i > f.height() && (i = f.height() - f.limit.rightBottom - 1), i < f.limit.leftUpper && (i = f.limit.leftUpper + 1), t.stopPropagation(), f.position(i, !0) }), "vertical" == h.orientation ? c = c > r - h.limit.rightBottom ? r - h.limit.rightBottom : g(h.position) : "horizontal" == h.orientation && (c = c > o - h.limit.rightBottom ? o - h.limit.rightBottom : g(h.position)), c < h.limit.leftUpper && (c = h.limit.leftUpper), f.position(c, !0); var v = this.closest(".splitter_panel"); return v.length && this.height(v.height()), 0 === _.filter(Boolean).length && (m(window).bind("resize.splitter", function () { m.each(_, function (t, i) { i && i.refresh() }) }), m(document.documentElement).on("mousedown.splitter touchstart.splitter", function (t) { null !== w && (t.preventDefault(), U = _[w], setTimeout(function () { m('<div class="splitterMask"></div>').css("cursor", U.children().eq(1).css("cursor")).insertAfter(U) }), U.settings.onDragStart(t)) }).bind("mouseup.splitter touchend.splitter touchleave.splitter touchcancel.splitter", function (t) { U && (setTimeout(function () { m(".splitterMask").remove() }), U.settings.onDragEnd(t), U = null) }).bind("mousemove.splitter touchmove.splitter", function (t) { if (null !== U) { U.limit.leftUpper; var i = U.limit.rightBottom, e = U.offset(); if ("vertical" == U.orientation) { var n = t.pageX; t.originalEvent && t.originalEvent.changedTouches && (n = t.originalEvent.changedTouches[0].pageX); var r = n - e.left; r <= U.limit.leftUpper ? r = U.limit.leftUpper + 1 : r >= U.width() - i && (r = U.width() - i - 1), r > U.limit.leftUpper && r < U.width() - i && (U.position(r, !0), U.trigger("splitter.resize"), U.find(".splitter_panel").trigger("splitter.resize")) } else if ("horizontal" == U.orientation) { var o = t.pageY; t.originalEvent && t.originalEvent.changedTouches && (o = t.originalEvent.changedTouches[0].pageY); var s = o - e.top; s <= U.limit.leftUpper ? s = U.limit.leftUpper + 1 : s >= U.height() - i && (s = U.height() - i - 1), s > U.limit.leftUpper && s < U.height() - i && (U.position(s, !0), U.trigger("splitter.resize"), U.find(".splitter_panel").trigger("splitter.resize")) } U.settings.onDrag(t) } })), (_[s] = f).data("splitter", f), f } }(jQuery);
 //# sourceMappingURL=/sm/7671b5b71f9f999c5b3135536b138bb5875a8719687c1d71b9fe723a154e4189.map