/**
 * Minified by jsDelivr using Terser v5.9.0.
 * Original file: /npm/jsvi@0.1.0/vi.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
/**@license
 *  JSVI - VI in JavaScript.
 *  Copyright (C) 2006-2008 Internet Connection, Inc.
 *  Copyright (C) 2013-2018 Jakub Jankiewicz
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
var vi = function () {
    var browser = function () { var e, r; return r = {}, (e = function (e) { e = e.toLowerCase(); var r = /(chrome)[ \/]([\w.]+)/.exec(e) || /(webkit)[ \/]([\w.]+)/.exec(e) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(e) || /(msie) ([\w.]+)/.exec(e) || e.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(e) || []; return { browser: r[1] || "", version: r[2] || "0" } }(navigator.userAgent)).browser && (r[e.browser] = !0, r.version = e.version), r.chrome ? r.webkit = !0 : r.webkit && (r.safari = !0), r }(), emacsen = !1, term_cols, term_rows, term_win_width, term_win_height, term_cur_width, suggest, backing, fakemode, tagstyle = 0, line_height = 0, cclick = void 0, mode = 0, accum = 0, lastaccum = 0, marks = new Object, registers = new Object, lastreg = "", lastcommand, lastmotion, cursoriv, drawiv, term, editor_wrapper, base = 0, left = 0, spell_script, vselm = 0, vselx = void 0, vsely = void 0, vseld = !1, lastkey = void 0, statustext = "", command = "", oldcommand = "", commandleft = 0, savex, savey, once = !0, cursorx, cursory, file = new Array, tags = new Array, palette, cursor, yank_buffer = void 0, term_save_h = new Array, term_save_ss, term_save_mc, term_save_kd, term_save_kp, term_save_rs, term_save_op, lastsearch, lastsubst, lastflags, undoset = void 0, undoline = void 0, undoy = -1, term_ex_motion, vi_ft_reg, viflags = "", lastinsert = "", spelling = !1, spellcheck = new Object, safewords = new Object, brokenwords = new Object, suggestions = new Object, onSave, onExit; safewords.jsvi = !0, safewords.javascript = !0, safewords.URL = !0, safewords.hyperlinks = !0, safewords.HTML = !0, safewords.UNIX = !0, safewords.Firefox = !0, safewords.MSIE = !0, safewords.Ctrl = !0, safewords.vi = !0, safewords["vi-keys"] = !0, safewords[":hardcopy"] = !0, safewords["unicode-aware"] = !0, safewords["developer-centric"] = !0; var doing_backing_paste = !1; function _true() { return !0 } function _false() { return !1 } function _cbrestore() { var e; for (e = 0; e < term_save_h.length; e++) { (0, term_save_h[e])() } term_save_h = new Array } function _cbw(e, r) { var t, s, o = window["on" + e]; t = e, s = o, term_save_h[term_save_h.length] = function () { window["on" + t] = s }, window["on" + e] = r } function _cbd(e, r) { var t, s, o = document["on" + e]; t = e, s = o, term_save_h[term_save_h.length] = function () { document["on" + t] = s }, document["on" + e] = r } function _rer(e, r, t) { if (null != RegExp.rightContext) return RegExp.rightContext; var s = e.toString(); if ("/^" == s.substr(0, 2) && "/" == s.substr(s.length - 1, 1) || "^" == s.substr(0, 1)) return r.substr(t[0].length, r.length - t[0].length); if ("/" == s.substr(0, 1) && "$/" == s.substr(s.length - 2, 2) || "$" == s.substr(s.length - 1, 1)) return ""; var o = r.lastIndexOf(t[0]); return -1 != o ? r.substr(o.t.length - o) : r } function _rel(e, r, t) { if (null != RegExp.leftContext) return RegExp.leftContext; var s = e.toString(); if ("/^" == s.substr(0, 2) && "/" == s.substr(s.length - 1, 1) || "^" == s.substr(0, 1)) return ""; if ("/" == s.substr(0, 1) && "$/" == s.substr(s.length - 2, 2) || "$" == s.substr(s.length - 1, 1)) return r.substr(0, r.length - t[0].length); var o = r.indexOf(t[0]); return -1 != o ? r.substr(0, o) : "" } function _hra(e) { var r, t = 0, s = "", o = ""; for (r = 0; r < e.length; r++) { var l = e.substr(r, 3), a = String.fromCharCode(t); "<b>" == l ? (t |= 1, r += 2) : "</b" == l ? (t = 1 ^ (1 | t), r += 3) : "<u>" == l ? (t |= 2, r += 2) : "</u" == l ? (t = 2 ^ (2 | t), r += 3) : "<i>" == l ? (t |= 16, r += 2) : "</i" == l ? (t = 16 ^ (16 | t), r += 3) : "<sp" == l ? (t |= 4, r += 16) : "</s" == l ? (t = 4 ^ (4 | t), r += 6) : "&am" == l ? (s += "&", o += a, r += 4) : "&lt" == l ? (s += "<", o += a, r += 3) : (s += e.substr(r, 1), o += a) } var i = new Array; return i[0] = s, i[1] = o, i } function _rtf(e, r) { var t, s = 0, o = ""; for (null == e && (e = "", r = ""), t = 0; t < e.length; t++) { var l = r.substr(t, 1).charCodeAt(0), a = e.substr(t, 1); "<" == a ? a = "&lt;" : "&" == a && (a = "&amp;"), l != s && (1 & l && !(1 & s) ? o += "<b>" : !(1 & l) && 1 & s && (o += "</b>"), 2 & l && !(2 & s) ? o += "<u>" : !(2 & l) && 2 & s && (o += "</u>"), 4 & l && !(4 & s) ? o += '<span class="rv">' : !(4 & l) && 4 & s && (o += "</span>"), 16 & l && !(16 & s) ? o += "<i>" : !(16 & l) && 16 & s && (o += "</i>"), s = l), o += a } return o } function _rtfl(e) { return _rtf(file[e], tags[e]) } function _dfx(e) {
        /*@cc_on @*/
        e.style.position = "fixed"
    } function term_freeze() { var e, r = ""; for (e = 0; e < file.length; e++)r += _rtfl(e) + "\n"; return r } function term_thaw(e) { var r, t, s = e.split("\n"); file = new Array, tags = new Array; for (r = 0; r < s.length; r++)t = _hra(s[r]), file[r] = t[0], tags[r] = t[1] } function _mxo(e, r) { var t, s = ""; for (t = 0; t < e.length; t++)s += String.fromCharCode(e.substr(t, 1).charCodeAt(0) | r); return s } function _mxs(e, r) { var t, s = String.fromCharCode(r), o = ""; for (t = 0; t < e; t++)o += s; return o } function _zeros(e) { return _mxs(e, 0) } function _fauc() { var e, r = document.getElementsByTagName("A"); for (e = 0; e < r.length; e++) { var t = r[e]; if (t._len && t._term && t._row == base + cursory && left + cursorx >= t._col && left + cursorx <= t._col + t._len) return t } } function _pass_click(e) { var r = _fauc(); return !(!r || !r.onclick) && r.onclick() } function _pass_dblclick(e) { var r = _fauc(); return !(!r || !r.ondblclick) && r.ondblclick() } function _cancel_ev(e) { return e || (e = window.event), !!e && (e.preventDefault && e.preventDefault(), e.stopPropagation && e.stopPropagation(), !1) } function _willclick(e) { if (window.event && (e || (e = window.event)), !e) return !0; null != cclick && window.clearTimeout(cclick); var r = e.clientX, t = e.clientY; return cclick = window.setTimeout((function () { cclick = void 0, _cursortoxy(r, t) }), 200), !1 } function _subclick(e) { return _willclick(e) } function _srep(e) { e || (e = window.event), e.preventDefault && e.preventDefault(), e.stopPropagation && e.stopPropagation(), e.cancelBubble = !0; for (var r = this._row, t = this._col, s = this._len, o = this._word, l = file[r], a = tags[r], i = l.substr(t, s), n = a.substr(t, s); n.length < o.length;)n += n; for (n.length > o.length && (n = n.substr(0, o.length)), term_save_undo(), file[r] = l.substr(0, t) + o + l.substr(t + s, l.length - (t + s)), tags[r] = a.substr(0, t) + n + a.substr(t + s, l.length - (t + s)), suggest.style.display = "none", suggest._visible = !1; suggest.firstChild;)suggest.removeChild(suggest.firstChild); return statustext = i == o ? "" : 'Replaced "' + i + '" with "' + o + '"', term_redraw(), !1 } function _rl(e, r) { var t = document.createElement("DIV"); return t.style.overflow = "hidden", t.style.height = r + "px", t.style.marginLeft = e + "px", t.style.marginRight = e + "px", t.style.backgroundColor = palette[0], t.style.display = "block", t.style.innerHTML = "&nbsp;", t.style.fontFamily = "monospace", t } function _ruo(e) { this.style.color = palette[0], this.style.backgroundColor = palette[1] } function _rux(e) { this.style.color = palette[1], this.style.backgroundColor = palette[0] } function _openurl(e) { var r = this._term; return window.open(r, "_new"), !0 } function _suggest(e) { var r; return window.event && (e || (e = window.event)), e && (e.preventDefault && e.preventDefault(), e.stopPropagation && e.stopPropagation(), e.cancelBubble = !0), r = this, window.setTimeout((function () { _dosuggest(r) }), 10), !1 } function _dosuggest(e) { for (var r = 0, t = 0, s = e._term, o = e._row, l = e._col, a = e._len; e && e != document.body;)r += e.offsetLeft, t += e.offsetTop, e = e.offsetParent; for (suggest._visible = !0, suggest.style.top = t + "px", suggest.style.left = r + "px", suggest.style.display = "block", suggest.style.zIndex = "3", suggest.style.padding = "2px"; suggest.firstChild;)suggest.removeChild(suggest.firstChild); var i = document.createElement("DIV"); i.style.backgroundColor = palette[0], i.style.color = palette[1], i.style.fontSize = "100%", i.style.padding = "2px", i.style.textAlign = "center", i.style.cursor = "default"; var n, u, c = suggestions[s], _ = 200, m = parseInt(100 / c.length * 1.5); for (n = 0; n < c.length; n++) { var f; (f = document.createElement("A")).href = "javascript:void(0)", f.onclick = _srep, f._word = c[n], f._row = o, f._col = l, f._len = a, f.onmouseover = _ruo, f.onmouseout = _rux, f.style.margin = "4px", f.style.textDecoration = "none", f.style.display = "block", f.style.color = palette[1], f.style.backgroundColor = palette[0], f.style.fontSize = _ + "%", (_ -= m) <= 100 && (_ = 100), f.appendChild(document.createTextNode(c[n])), f.appendChild(document.createElement("BR")), o - base > term_rows - (c.length + 1) ? (i.insertBefore(f, i.firstChild), u = !0) : n % 2 == 0 || o < c.length + 1 ? i.appendChild(f) : i.insertBefore(f, i.firstChild), f = void 0 } 0 == c.length && i.appendChild(document.createTextNode("No matches")), (f = document.createElement("A")).href = "javascript:void(0)", f.onclick = _srep, f._word = s, f._row = o, f._col = l, f._len = a, f.style.margin = "4px", f.style.textDecoration = "none", f.style.color = palette[1], f.style.backgroundColor = palette[0], f.style.borderBottom = "1px dashed red", f.style.fontSize = "100%", f.onmouseover = _ruo, f.onmouseout = _rux, f.appendChild(document.createTextNode(s)), o > term_rows - (c.length + 1) ? i.insertBefore(f, i.firstChild) : i.appendChild(f), suggest.appendChild(_rl(3, 1)), suggest.appendChild(_rl(2, 1)), suggest.appendChild(_rl(1, 2)), suggest.appendChild(i), suggest.appendChild(_rl(1, 2)), suggest.appendChild(_rl(2, 1)), suggest.appendChild(_rl(3, 1)); var d = 11; for (d < s.length && (d = s.length), n = 0; n < c.length; n++)d < c[n].length && (d = c[n].length); d && (d *= 2 * term_cur_width, d += 16, suggest.style.width = d + "px"); var v = parseInt(i.offsetWidth / 4); r < v ? r = 0 : (r -= v, suggest.style.left = r + "px"); var g = parseInt(i.offsetHeight / 4); u ? (suggest.style.top = "", suggest.style.bottom = "0px") : t < g ? (t = 0, suggest.style.top = "0px", suggest.style.bottom = "") : (t -= g, suggest.style.top = t + "px", suggest.style.bottom = ""), statustext = "Suggestions for: " + s, term_redraw(), f = void 0, i = void 0 } function _backing_paste_real() { doing_backing_paste = !1, term_redraw(), backing.value && backing._lastvalue != backing.value && (backing._lastvalue = backing.value, term_paste(!1, backing.value), term_redraw()) } function _msie_paste() { event.returnValue = !1, term_paste(!1, window.clipboardData.getData("Text", "new content associated with this object")) } function _backing_paste() { _update_backing(), doing_backing_paste || (doing_backing_paste = !0, window.setTimeout(_backing_paste_real, 10)) } function _update_backing() {
        backing && (
            /*@cc_on @*/
            backing.focus(), backing.select())
    } function _yaty(e) { if (line_height) return parseInt(e / line_height); for (var r, t = term.firstChild, s = 0; t && t != document.body;)s += t.offsetTop, t = t.offsetParent; var o = 0, l = 0; for (r = term.firstChild; r; r = r.nextSibling) { if (e <= (s += r.offsetHeight + 4)) { l = o; break } o++ } return l } function _cursortoxy(e, r) { var t = cursorx; cursorx = parseInt(e / term_cur_width), term_redraw(); var s = cursory; return (cursory = _yaty(r)) >= term_rows - 1 && (cursory = s, cursorx = t, s = 0), term_scrollto(), term_calcx(), cursory != s ? term_redraw() : term_calcy(), _update_backing(), !0 } function _mousescroll(e) { e || (e = window.event); var r = 0; if (e.wheelDelta) r = (r = e.wheelDelta) < 0 ? 1 : -1; else { if (!e.detail) return !0; r = e.detail } return r < 0 ? base > 0 && base-- : r > 0 && base < file.length - (term_rows - 1) && base++, term_redraw(), !1 } function _mousedown(e) { return !!suggest._visible || (e || (e = window.event), _yaty(e.clientY) >= term_rows - 1 || (_willclick(e), vseld = !0, vselm = 0, vselx = void 0, vsely = void 0, !1)) } function _mousemove(e) { if (e || (e = window.event), e && (e.preventDefault && e.preventDefault(), e.stopPropagation && e.stopPropagation(), e.cancelBubble = !0), window.getSelection) { var s = window.getSelection(); s.removeAllRanges && s.removeAllRanges() } return document.selection && document.selection.empty && eval("try{document.selection.empty();}catch(e){}"), _update_backing(), !(!suggest._visible && vseld) || (!vseld || (null == vselx && null == vsely && (vselm = 1, vselx = cursorx + left, vsely = cursory + base), _willclick(e), !0)) } function _mouseup(e) { if (suggest._visible || !vseld) return !0; if (vseld = !1, vselm && null != vselx && null != vsely) { var r = lastreg; lastreg = "*", term_vi_set("y"), term_vi_unset("d"), term_select(), term_operate(), lastreg = r } else vselm = 0; return _willclick(e), !1 } function _mouseclick(e) { return e || (e = window.event), _yaty(e.clientY) >= term_rows - 1 || (vselm = 0, _cursorto(e)), !0 } function _cursorto(e) { e || (e = window.event); var r = e.clientX, t = e.clientY; return suggest._visible && (suggest.style.display = "none", suggest._visible = !1, statustext = ""), _cursortoxy(r, t) } function _word(e) { var r = e.replace(/[.?!,:]*$/, ""); return r && (e = r), (r = e.replace(/[ \r\n\t]/, "")) && (e = r), e } function _safe(e) { return !!e.match(/^[ \r\n\t]*<.*>[ \r\n\t]*$/) } function _xhttp() {
        var e = !1;
    /*@cc_on @*/return e || "undefined" == typeof XMLHttpRequest || (e = new XMLHttpRequest), e || new Object
    } function term_setmode(e) { mode = e, lastinsert = "" } function term_roll_yank() { registers[9] = registers[8], registers[8] = registers[7], registers[7] = registers[6], registers[6] = registers[5], registers[5] = registers[4], registers[4] = registers[3], registers[3] = registers[2], registers[2] = registers[1], registers[1] = registers[0], "0" == lastreg && (registers[""] = yank_buffer), "" != lastreg && "*" != lastreg || (backing._lastvalue = yank_buffer, backing.value = yank_buffer), registers[0] = yank_buffer } function term_justify() { var e, r = cursory + base; accum || (accum = 1); var t = file[r]; for (file[p] = t.replace(/[ ][ ]*$/, ""), tags[p] = tags[p].substr(0, file[p].length), e = 0; e < accum; e++) { t = file[e + r + 1]; var s = tags[e + r + 1]; term_delete(e + r + 1), t = t.replace(/^[ ][ ]*/, ""), s = s.substr(s.length - t.length, t.length), "" != t && (file[r] = file[r] + " " + t, tags[r] = tags[r] + "\0" + s) } file[r] = file[r].replace(/^[ ][ ]*/, ""), tags[r] = tags[r].substr(tags[r].length - file[r].length, file[r].length), accum = 0 } function term_vi_bb() { return term_skipbackward(/[ ][^ ][^ ]*[ ]*$/) } function term_vi_b() { return term_skipbackward(/[^a-zA-Z0-9_][a-zA-Z0-9_][a-zA-Z0-9_]*[^a-zA-Z0-9_]*$/) } function term_vi_tt() { var e, r = file[cursory + base], t = term_cols; for (e = cursorx + left - 1; e >= 0; e--) { if (r.substr(e, 1) == vi_ft_reg) return (cursorx = e - left + 1) >= t && (left = 0, cursorx = e + 1), !0 } return !1 } function term_vi_t() { var e, r = file[cursory + base]; for (e = cursorx + left + 1; e < r.length; e++) { if (r.substr(e, 1) == vi_ft_reg) return cursorx = e - left - 1, (term_vi_flag("d") || term_vi_flag("c") || term_vi_flag("y")) && cursorx++, cursorx < 0 && (left = 0, cursorx = e - 1), !0 } return !1 } function term_vi_ff() { var e, r = file[cursory + base]; for (e = cursorx + left - 1; e >= 0; e--) { if (r.substr(e, 1) == vi_ft_reg) return (cursorx = e - left) < 0 && (left = 0, cursorx = e), !0 } return !1 } function term_vi_f() { var e, r = file[cursory + base], t = term_cols; for (e = cursorx + left + 1; e < r.length; e++) { if (r.substr(e, 1) == vi_ft_reg) return cursorx = e - left, (term_vi_flag("d") || term_vi_flag("c") || term_vi_flag("y")) && cursorx++, cursorx >= t && (left = 0, cursorx = e), !0 } return !1 } function term_vi_eof() { return cursorx = 0, left = 0, base = 0, accum ? (cursory = accum - 1, !1) : (base = file.length - (term_rows - 1), cursory = term_rows - 1, base < 0 && (base = 0, cursory = file.length - 1), term_redraw(), !0) } function term_vi_top() { return cursorx = 0, base = 0, left = 0, accum ? (cursory = accum - 1, !1) : (cursory = 0, !0) } function term_vi_h() { return cursorx--, term_scrollto(), !0 } function term_vi_j() { return cursory++, term_scrollto(), !0 } function term_vi_k() { return cursory--, term_scrollto(), !0 } function term_vi_l() { cursorx++; var e = mode; return mode = 1, term_scrollto(), mode = e, !0 } function term_vi_ll() { return cursory = term_rows - 2, !0 } function term_vi_mm() { return cursory = parseInt((term_rows - 2) / 2), cursorx = 0, left = 0, !0 } function term_vi_hh() { return cursory = 0, !0 } function term_vi_ob() { return cursory--, term_skipreverse2(/^[ ]*$/, 0) } function term_vi_cb() { return cursory++, term_skipforward(/^[ ]*$/, 0) } function term_vi_ww() { return term_skipforward(/[ ][^ ]/, 0) } function term_vi_w() { return term_skipforward(/[^a-zA-Z0-9_(){}<>][a-zA-Z0-9_(){}<>]/, 0) } function term_vi_flag(e) { return -1 != viflags.indexOf(e) } function term_vi_unset(e) { var r = viflags.indexOf(e); -1 != r && (viflags = viflags.substr(0, r) + viflags.substr(r + 1, viflags.length - r - 1)) } function term_vi_set(e) { -1 == viflags.indexOf(e) && (viflags += "" + e) } function term_vi_bounce() { for (var e = cursory + base, r = file[e], t = cursorx + left; t < r.length;) { var s = "[{()}]".indexOf(r.substr(t, 1)); if (-1 != s) for (var o = s > 2 ? -1 : 1, l = "]})({[".substr(s, 1); e >= 0 && e < file.length;) { for (; t > 0 && t < r.length;) { if (r.substr(t, 1) == l) return cursorx = t - left, cursory = e, base = 0, term_scrollto(), !0; t += o } -1 == o ? (e--, t = (r = file[e]).length - 1) : (e++, r = file[e], t = 0) } else t++ } return !1 } function term_vi_eol() { var e = file[cursory + base]; return (cursorx = e.length - left) < 0 && (left = 0, cursorx = e.length), !0 } function term_vi_line() { var e = file[cursory + base]; return left = 0, cursorx = e.length + 1, !0 } function term_vi_ee() { return term_skipforward(/[^ ][ ]/, 1) } function term_vi_e() { return !!term_skipforward(/[a-zA-Z0-9_(){}<>][^a-zA-Z0-9_(){}<>]/, 1) && ((term_vi_flag("d") || term_vi_flag("c") || term_vi_flag("y")) && cursorx++, !0) } function term_vi_v() { (cursorx = vselx - left) < 0 && (left = 0, cursorx = vselx), (cursory = vsely - base) < 0 && (base = 0, cursory = vsely) } function term_vi_vv() { term_vi_v(), term_vi_line() } function term_select() { 1 == vselm ? term_ex_motion = term_vi_v : 2 == vselm && (term_ex_motion = term_vi_vv, cursorx = 0, left = 0) } function term_indent(e, r) { null == file[e] && (file[e] = "", tags[e] = ""), file[e] = _mxs(4 * r, 32) + file[e], tags[e] = _mxs(4 * r, tagstyle) + tags[e] } function term_unindent(e, r) { for (r *= 4; r > 0 && " " == file[e].substr(0, 1);)file[e] = file[e].substr(1, file[e].length - 1), r-- } function term_operate() { term_save_undo(); var e = accum; e || (e = 1); for (var r = cursorx + left, t = cursory + base; e > 0;) { if (null == (a = file[base + cursory])) break; e > 1 && cursorx + left >= a.length && (cursory++, cursorx = 0, left = 0), term_ex_motion(), e-- } (e = accum) || (e = 1), accum = 0; var s, o = cursorx + left, l = cursory + base; l < t && (s = l, l = t, t = s), o < r && (s = o, o = r, r = s); var a = file[l] || "", i = tags[l], n = !1; if (term_vi_flag("c") && term_vi_set("d"), 2 != vselm && l == t && o <= a.length) vselm && o++, o != r && (term_vi_flag("F") ? tags[l] = i.substr(0, r) + _mxs(o - r, tagstyle) + i.substr(o, i.length - o) : (term_vi_flag("d") || term_vi_flag("y")) && (yank_buffer = _rtf(a.substr(r, o - r), i.substr(r, o - r))), term_vi_flag("d") ? (file[l] = a.substr(0, r) + a.substr(o, a.length - o), tags[l] = i.substr(0, r) + i.substr(o, i.length - o), "_" != lastreg && (registers[lastreg] = yank_buffer, term_roll_yank())) : term_vi_flag("y") && (registers[lastreg] = yank_buffer, term_roll_yank()), term_vi_flag(">") ? term_indent(l, e) : term_vi_flag("<") && term_unindent(l, e)); else if (1 == vselm) { if (term_vi_flag("d") || term_vi_flag("y") || term_vi_flag("F")) { var u, c; for (yank_buffer = "", s = t; s <= l; s++)a = file[s], i = tags[s], s == t ? (u = t == vsely && r == vselx || t != vsely && r != vselx ? r : o, c = a.length) : s == l ? (u = 0, u = t == vsely && r == vselx || t != vsely && r != vselx ? o : r) : (u = 0, c = a.length), yank_buffer += _rtf(a.substr(u, c - u), i.substr(u, c - u)), t == l && 2 != vselm || (yank_buffer += "\n"), term_vi_flag("d") ? (file[s] = a.substr(0, u) + a.substr(c, a.length - c), tags[s] = i.substr(0, u) + i.substr(c, i.length - c)) : term_vi_flag("F") && (tags[s] = i.substr(0, u) + _mxs(c - u, tagstyle) + i.substr(c, i.length - c)), term_vi_flag(">") ? term_indent(s, e) : term_vi_flag("<") && term_unindent(s, e); "_" == lastreg || term_vi_flag("F") || (registers[lastreg] = yank_buffer, term_roll_yank()) } } else if (term_vi_flag("F")) for (s = t; s <= l; s++)tags[s] = _mxs(file[s].length, tagstyle); else if (term_vi_flag("d")) { for (yank_buffer = "", s = t; s <= l; s++)yank_buffer += term_delete(t); "_" != lastreg && (registers[lastreg] = yank_buffer, term_roll_yank()) } else if (term_vi_flag("y")) { for (yank_buffer = "", s = t; s <= l; s++)yank_buffer += _rtfl(t) + "\n"; registers[lastreg] = yank_buffer, term_roll_yank() } else if (term_vi_flag(">")) for (s = t; s <= l; s++)term_indent(s, e); else if (term_vi_flag("<")) for (s = t; s <= l; s++)term_unindent(s, e); term_vi_flag("d") && (term_vi_unset("d"), lastcommand = "d", lastmotion = term_ex_motion, n = !0), term_vi_flag("y") && (term_vi_unset("y"), n = !0), term_vi_flag("F") && (term_vi_unset("F"), n = !0), lastaccum = accum, n && ((cursorx = r - left) < 0 && (cursorx = r, left = 0), (cursory = t - base) < 0 && (cursory = t, base = 0), term_scrollto()), term_vi_flag("c") && (term_vi_unset("c"), term_setmode(1)), accum = 0 } function term_save_undo_line() { base + cursory != undoy && (undoline = _rtfl(undoy = base + cursory)) } function term_save_undo() { undoset = term_freeze() } function term_delete(e) { if (e > file.length) return ""; var r, t = file[e], s = tags[e]; for (r = e + 1; r < file.length; r++)file[r - 1] = file[r], tags[r - 1] = tags[r]; return file = _pop(file), _rtf(t, s) + "\n" } function term_skipreverse2(e, r) { for (var t = cursory + base, s = cursorx + left + (1 + r); ;) { var o = file[t]; if (null == o) return cursory = t - base, !1; r ? o += " " : o = " " + o, o = o.substr(s, o.length - s); var l = e.exec(o); if (l) return s += _rel(e, o, l).length, cursorx = s - left, cursory = t - base, !0; t--, s = 0 } return !1 } function term_skipforward(e, r) { for (var t = cursory + base, s = cursorx + left + (1 + r); ;) { var o = file[t]; if (null == o) return cursory = t - base, !1; r ? o += " " : o = " " + o, o = o.substr(s, o.length - s); var l = e.exec(o); if (l) return s += _rel(e, o, l).length, cursorx = s - left, cursory = t - base, !0; t++, s = 0 } return !1 } function term_skipbackward(e) { for (var r = cursory + base, t = cursorx + left + 1; ;) { var s = file[r]; if (null == s) return cursory = 0, cursorx = 0, !1; if ("" != (s = " " + s.substr(0, t - 1))) { var o = e.exec(s); return o ? (t = _rel(e, s, o).length, cursorx = t - left, cursory = r - base, !0) : (left = 0, cursorx = 0, cursory = r - base, !0) } (r--, null != (s = file[r])) && (t = s.length) } return !1 } function term_search(e, r, t, s) { var o, l = new RegExp(e.substr(1)); if ("/" == e.substr(0, 1)) { for (statustext = "", l.lastIndex = cursorx + left + 1, o = t; o < s; o++) { var a = file[o]; if (o == t && (a = a.substr(cursorx + left + 1, a.length - (cursorx + left + 1))), _ = l.exec(a)) { var i = _rel(l, a, _).length; return o == t && (i += cursorx + left + 1), left = 0, base = 0, cursorx = i, cursory = o, term_scrollto(), !0 } } for (statustext = "search hit BOTTOM, continuing at TOP", o = r; o <= t; o++) { if (_ = l.exec(file[o])) return left = 0, base = 0, cursorx = _rel(l, file[o], _).length, cursory = o, term_scrollto(), !0 } statustext = "Pattern not found: " + e.substr(1) } else { for (statustext = "", o = t; o >= r; o--) { if (null != (a = file[o])) for (var n = 0, u = n = o == t ? cursorx + left : a.length; n > 0;) { n--; var c = a.substr(n, u - n); if (_ = l.exec(c)) { i = n + _rel(l, c, _).length; return left = 0, base = 0, cursorx = i, cursory = o, term_scrollto(), !0 } } } for (statustext = "search hit TOP, continuing at BOTTOM", o = s; o >= t; o--) { if (null != (a = file[o])) for (n = a.length; n > 0;) { n--; var _; c = a.substr(n, a.length - n); if (_ = l.exec(c)) return cursorx = n + _rel(l, c, _).length, cursory = o, left = 0, base = 0, term_scrollto(), !0 } } statustext = "Pattern not found: " + e.substr(1) } return !1 } function term_rsearch(e, r, t, s) { var o = e.substr(0, 1); return term_search((o = "/" == o ? "?" : "/") + e.substr(1, e.length - 1), r, t, s) } function _pop(e) { var r, t = new Array; for (r = 0; r < e.length - 1; r++)t[r] = e[r]; return t } function _addr(e) { if ("." == e) return cursory + base; if ("$" == e) return file.length - 1; if ("'" == e.substr(0, 1)) return marks[e.substr(1, 1)]; if ("\\/" == e || "\\&" == e) { var r = cursory, t = base; term_search(lastsearch, 0, cursory + base, file.length); var s = cursory + base; return cursory = r, base = t, s } if ("\\?" == e) { r = cursory, t = base; term_rsearch(lastsearch, 0, cursory + base, file.length); s = cursory + base; return cursory = r, base = t, s } if ("/" == e.substr(0, 1) || "?" == e.substr(0, 1)) { r = cursory, t = base; term_search(e, 0, cursory + base, file.length); s = cursory + base; return cursory = r, base = t, s } return (e = parseInt(e) - 1) >= file.length - 1 && (e = file.length - 1), e < 0 && (e = 0), e } function term_command(e) { var r, t, s, o; e && e.length > 0 && ":" == e.substr(0, 1) ? (e = e.substr(1, e.length - 1), t = r = cursory + base, s = r) : (r = 0, t = cursory + base, s = file.length); var l = "", a = 0, i = new Array, n = void 0, u = !1; for (o = 0; o < e.length; o++) { var c = e.substr(o, 1); if ((0 == a || 1 == a) && "0123456789".indexOf(c) > -1) a = 1, l = "" + l + c; else if (1 == a && (a = 0, i[i.length] = parseInt(l) - 1, l = ""), "%" == c) r = 0, s = file.length, t = cursory + base; else if ("!" == c) u = !u; else if ("," == c) for (; i.length > 2;)i = _pop(i); else if (";" == c) t = i[i.length - 1], i = _pop(i), cursory = t, base = 0, i = _pop(i); else if ("$" == c) i[i.length] = file.length; else if ("." == c) i[i.length] = cursory + base; else if ("'" == c) i[i.length] = marks[e.substr(o + 1, 1)], o++; else if ("\\" == c) { var _; if (o++, _ = "?" == (c = e.substr(o, 1)) ? term_rsearch : term_search, 1 == i.length ? (r = i[0], i = _pop(i)) : i.length >= 2 && (r = i[i.length - 2], s = i[i.length - 1], i = _pop(_pop(i))), !_(lastsearch, r, t, s)) return; i[i.length] = cursory + base } else { if ("/" != c && "?" != c) { if (" " == c || "\t" == c) continue; break } var m = o; for (o++; o < e.length; o++) { if ("\\" == (a = e.substr(o, 1))) o++; else if (a == c) break } if (n = e.substr(m, o - m), 1 == i.length ? (r = i[0], i = _pop(i)) : i.length >= 2 && (r = i[i.length - 2], s = i[i.length - 1], i = _pop(_pop(i))), !term_search(n, r, t, s)) return; i[i.length] = cursory + base } } 1 == a && (i[i.length] = parseInt(l) - 1, l = "", o++), 1 == i.length ? (r = i[0], s = i[0]) : i.length >= 2 && (r = i[i.length - 2], s = i[i.length - 1]), null != n && (lastsearch = n, registers["/"] = lastsearch.substr(1, lastsearch.length - 1)); var f = e.substr(o, 2), d = e.substr(o, 1); if ("wq" == f || "x" == d) editor_disable(!0), "wq" == f && onSave && onSave(), onExit && onExit(); else { if ("=" == d) return void (statustext = "" + s); if ("ha" == f) return void window.print(); if ("w" == d) { var v = term_freeze(); term._formelement && (term._formelement.value = v), statustext = '"/tmp/mess4XbCXM" ' + file.length + "L, " + v.length + "C written", onSave && onSave() } else if (emacsen || "emacs" != e.substr(o, e.length - o)) if (emacsen && "vi" == f) statustext = "VI mode enabled. Press ESC :emacs to use EMACS mode", mode = 0, emacsen = !1; else if ("e" == d && term._formelement) { v = term_freeze(); if ("e!" != f) if ("e?" == f) { if (!confirm("Your changes will be lost\nAre you sure?")) return } else if (term._formelement.value != v) return void (statustext = "No write since last change (use ! to override)"); term_thaw(term._formelement.value) } else if ("f" == d) { v = term_freeze(); statustext = '"/tmp/mess4XbCXM"', term._formelement.value != v && (statustext += " [Modified]"), statustext += " line " + (cursory + base + 1) + " of " + file.length + " col " + (cursorx + left + 1) } else if ("h" == d || "about" == e.substr(o, 5)) statustext = "jsvi © 2006 Internet Connection, Inc; 2013 Jakub Jankiewicz"; else if ("kwak" == e.substr(o, 4)) term.style.backgroundImage = "url(ducky.jpg)", statustext = "kwak kwak kwak..."; else if ("moo" == e.substr(o, 3)) statustext = "This editor does not have Super Cow Powers"; else if ("b" == d); else if ("n" == d || "N" == d) statustext = "There is only one file to edit"; else if ("q" == d) { v = term_freeze(); if ("q!" != f && term._formelement.value != v) return "q?" == f ? confirm("Your changes will be lost\nAre you sure?") ? (editor_disable(!1), void (onExit && onExit())) : void 0 : void (statustext = "No write since last change (use ! to override)"); editor_disable(!1), onExit && onExit() } else if ("d" == d) { for (yank_buffer = term_delete(r); r < s;)yank_buffer += term_delete(r), s--; "_" != lastreg && (registers[lastreg] = yank_buffer, term_roll_yank()), term_scrollto() } else if ("u" == d) { var g = term_freeze(); term_thaw(undoset), undoset = g } else if ("y" == d) { for (yank_buffer = "", o = r; o < s; o++)yank_buffer += file[o] + "\n"; registers[lastreg] = yank_buffer, term_roll_yank() } else if ("F" == d) { var b = 0, y = 0, p = void 0, h = tagstyle, x = "="; for (C = o + 1; C < e.length; C++) { var k = e.substr(C, 1); if ("=" == k || "+" == k || "-" == k || "!" == k) x = k; else { var w = 0; if ("b" == k) w = 1; else if ("i" == k) w = 16; else if ("u" == k) w = 2; else { if ("o" != k) return void (statustext = "Unrecognized formatting specifier: " + k); w = 4 } "!" == x ? (null != p && (tagstyle = p), tagstyle ^= w) : "=" == x ? (null == p && (p = 0), p += w) : "+" == x ? b |= w : "-" == x && (y |= w) } } if (tagstyle = null == p ? (tagstyle | b | y) ^ y : p, 0 != o) { for (C = r; C <= s; C++)null != file[C] && (tags[C] = _mxs(file[C].length, tagstyle)); tagstyle = h } else vselm && (term_select(), term_vi_unset("d"), term_vi_unset("y"), term_vi_unset("c"), term_vi_set("F"), term_operate(), tagstyle = h) } else if ("g" == d || "v" == d) { var C; i = e.substr(o + 1, e.length - o - 1); for ("v" == d && (i = "!" + i), C = 0; C < file.length; C++)base = 0, cursory = C, term_command(i) } else if ("t" == d || "co" == f) { var E, A = e.substr(o, e.length - o).replace(/^[a-z]*[ ]*/); for (yank_buffer = "", E = r; E <= s; E++)null != file[E] && (yank_buffer += file[E] + "\n"); var S = cursory, I = base; base = 0, cursorx = 0, left = 0, (cursory = _addr(A)) < 0 && (cursory = 0), term_paste(!1, yank_buffer), cursory = S, base = I } else if ("m" == d) { o++, "ove" == e.substr(o, 3) && (o += 3); A = e.substr(o, e.length - o); for (yank_buffer = term_delete(r); r < s;)yank_buffer += term_delete(r), s--; S = cursory, I = base; base = 0, cursorx = 0, left = 0, (cursory = _addr(A)) < 0 && (cursory = 0), term_paste(!1, yank_buffer), cursory = S, base = I } else if ("s" == d) { o++; for (var T = e.substr(o, 1); " " == T;)o++, T = e.substr(o, 1); var z = e.substr(o, 1); if (o++, "" == z) { if (!lastsearch || !lastsubst) return void (statustext = "No previous substitute regular expression"); lastsearch.substr(1, lastsearch.length - 1), lastsubst, lastflags } else { for (var D, O = o; o < e.length; o++)if ("\\" == (D = e.substr(o, 1))) o++; else if (D == z) break; for (lastsearch = "/" + e.substr(O, o - O), registers["/"] = lastsearch.substr(1, lastsearch.length - 1), O = ++o; o < e.length; o++)if ("\\" == (D = e.substr(o, 1))) o++; else if (D == z) break; lastsubst = e.substr(O, o - O), lastflags = "", o++; for (var N = -1; o < e.length; o++) { if ("i" != (D = e.substr(o, 1)) && "g" != D) { if ((N = parseInt(e.substr(o, e.length - o))) > 0) break; return void (statustext = "Trailing characters") } lastflags += D } var P = new RegExp; P.compile(lastsearch.substr(1, lastsearch.length - 1), lastflags.indexOf("i") > -1 ? "i" : ""); var M = !1; for (o = r; o < s; o++) { A = file[o]; var L, B = tags[o], j = A; if ((L = P.exec(A)) && 0 != L.length) { for (file[o] = "", tags[o] = ""; ;) { A = _rer(P, j, L); var V = _rel(P, j, L), R = _resubst(lastsubst, L); if (file[o] += V + R, tags[o] += B.substr(0, V.length) + _zeros(R.length), !(lastflags.indexOf("g") > -1 && (j = A, (L = P.exec(A)) && L.length > 0))) { file[o] += A, tags[o] += B.substr(B.length - A.length, A.length); break } } if (M = !0, N > -1 && 0 == --N) break } } M || (statustext = "Pattern not found: " + lastsearch.substr(1, lastsearch.length - 1)) } } else "" == d && i.length > 0 ? (base = 0, cursory = r) : statustext = "Not an editor command: " + e.substr(o, e.length - o); else statustext = "EMACS mode enabled. Press M-x vi to use vi mode", emacsen = !0, mode = 1 } } function _resubst(e, r) { var t, s = ""; for (t = 0; t < e.length; t++) { var o = e.substr(t, 1); "\\" == o ? (o = "\\1" == (o = e.substr(t, 2)) ? r[1] : "\\2" == o ? r[2] : "\\3" == o ? r[3] : "\\4" == o ? r[4] : "\\5" == o ? r[5] : "\\6" == o ? r[6] : "\\7" == o ? r[7] : "\\8" == o ? r[8] : "\\9" == o ? r[9] : e.substr(t + 1, 1), t++) : "&" == o && (o = r[0]), s += o } return s } function _calcy(e, r, t) { if (e && cursor._lasty != cursory) { cursor._lasty = cursory; for (var s = 0; e && e != document.body;)s += e.offsetTop, e = e.offsetParent; cursor.style.top = s + "px" } var o = r.substr(cursorx, 1), l = t.substr(cursorx, 1).charCodeAt(0); if ((cursorx >= r.length || null == o || " " == o || "" == o) && (o = " "), cursor._lastch != o || cursor._lastgh != l) { for (" " == o && (o = " ", l = 0); cursor.firstChild;)cursor.removeChild(cursor.firstChild); cursor.appendChild(document.createTextNode(o)), cursor._lastch = o, cursor._lastgh = l, cursor.style.fontWeight = 1 & l ? "bold" : "normal", cursor.style.textDecoration = 2 & l ? "underline" : "none", cursor.style.fontStyle = 16 & l ? "italic" : "normal" } } function term_calcy() { var e = file[cursory + base]; if (!e) return 0; var r = tags[cursory + base], t = left; cursory == term_rows - 1 && (t = commandleft, r = _mxs((e = command + " ").length + 1, 0)); var s = term.childNodes; _calcy(s = s.length > cursory ? term.childNodes[cursory] : void 0, e.substr(t, e.length - t), r.substr(t, r.length - t)) } function term_calcx() { cursorx != cursor._lastx && (cursor.style.left = cursorx * term_cur_width + "px", cursor._lastx = cursorx, term_calcy()) } function term_scrollto() { var e = term_rows, r = term_cols, t = cursorx + left, s = cursory + base, o = file[s]; "" == command && e--; var l = parseInt(r / 8); l < 4 && (l = 4); var a = parseInt(e / 8); for (a < 4 && (a = 4); null == o && s > 0;)s--, o = file[s]; null == o && (o = ""), t >= o.length && (t = mode ? o.length : o.length - 1), t < 0 && (t = 0), s < 0 && (s = 0), t < left ? (cursorx = l, (left = t - l) < 0 && (left = 0, cursorx = 0)) : t >= left + r ? (left = t - r + l, cursorx = r - l) : cursorx = t - left, s < base ? (cursory = a, (base = s - a) < 0 && (base = 0, cursory = 0)) : s >= base + e ? (base = s - e + a, cursory = e - a) : cursory = s - base, term_calcx(), term_calcy() } function term_insert(e, r) { var t, s = file.length; for (file[s] = "", tags[s] = "", t = s; t > e; t--)file[t] = file[t - 1], tags[t] = tags[t - 1]; file[e] = "", tags[e] = "" } function term_paste(e, r) { if (null != r ? yank_buffer = r : (registers["."] = lastinsert, registers[":"] = oldcommand, registers["%"] = "/tmp/mess4XbCXM", registers["#"] = "", yank_buffer = registers[lastreg]), null == yank_buffer) return !1; if (yank_buffer.indexOf("\n") > -1) { e && cursory++; var t, s = yank_buffer.split("\n"); for (t = 0; t < s.length; t++) { if (t == s.length - 1) { if (null == s[t]) break; if ("" == s[t]) break; var o = _hra(s[t]); file[cursory + base + t] = o[0] + file[cursory + base + t], tags[cursory + base + t] = o[1] + tags[cursory + base + t]; break } term_insert(cursory + base + t); o = _hra(s[t]); file[cursory + base + t] = o[0], tags[cursory + base + t] = o[1] } } else { var l = file[cursory + base], a = tags[cursory + base]; o = _hra(yank_buffer); e && cursorx++, file[cursory + base] = l.substr(0, cursorx + left) + o[0] + l.substr(cursorx + left, l.length - (cursorx + left)), tags[cursory + base] = a.substr(0, cursorx + left) + o[1] + a.substr(cursorx + left, a.length - (cursorx + left)) } return !0 } function term_keyfix(e) { e || (e = window.event); var r = e.keyCode; return r || (r = e.which), e.DOM_VK_UP && (e.DOM_VK_UP == r ? r = 57373 : e.DOM_VK_DOWN == r ? r = 57374 : e.DOM_VK_LEFT == r ? r = 57375 : e.DOM_VK_RIGHT == r && (r = 57376)), 8 == r || 9 == r || 37 == r || 39 == r || 38 == r || 40 == r || 127 == r || 33 == r || 34 == r || 36 == r || 35 == r || 45 == r || 46 == r || 57373 == r || 57374 == r || 57375 == r || 57376 == r ? (e.preventDefault && e.preventDefault(), e.stopPropagation && e.stopPropagation(), term_keypress_inner(e, !0), e.cancelBubble = !0, !1) : (e.cancelBubble = !1, !0) } function term_keypress(e) { return e || (e = window.event), e.preventDefault && e.preventDefault(), e.stopPropagation && e.stopPropagation(), suggest._visible && (suggest.style.display = "none", suggest._visible = !1), e.cancelBubble = !0, term_keypress_inner(e, !1), !1 } function term_keyup(e) { if (fakemode || 0 === mode) vselm = 0, statustext = "", mode = 0; else if (27 == e.keyCode) { if (vselm = 0, statustext = "", "" != command) cursorx = savex, cursory = savey; else { if (accum > 1) { var r, t; for (t = lastreg, lastreg = ".", r = 1; r < accum; r++)term_paste(!1); lastreg = t, accum = 0 } cursorx--, term_scrollto() } mode = emacsen ? 1 : 0, command = "", commandleft = 0 } term_redraw(), _update_backing() } function term_keypress_inner(e, r) { var t, s, o = e.which; if (e.charCode) if (27 == e.charCode || 13 == e.charCode || 10 == e.charCode || 8 == e.charCode || 9 == e.charCode) o = e.charCode, t = String.fromCharCode(e.charCode); else if (63232 == e.charCode) o = 57373; else if (63233 == e.charCode) o = 57374; else if (63234 == e.charCode) o = 57375; else if (63235 == e.charCode) o = 57376; else { if (191 == e.charCode) return; t = String.fromCharCode(e.charCode), o = 0 } else if (e.keyCode) { if (o = e.keyCode, e.DOM_VK_UP ? e.DOM_VK_UP == o ? o = 57373 : e.DOM_VK_DOWN == o ? o = 57374 : e.DOM_VK_LEFT == o ? o = 57375 : e.DOM_VK_RIGHT == o && (o = 57376) : t = String.fromCharCode(e.keyCode), 191 == o) return } else { if (!o || 191 == o) return; t = String.fromCharCode(o) } s = e.modifiers ? e.modifiers : 0; var l = e.ctrlKey | 2 & s, a = (e.shiftKey, e.altKey | e.metaKey | 1 & s), i = lastkey; if (lastkey = t, null == t && (t = ""), !emacsen && 0 == mode) { if ("U" == t) { if (base + cursory == undoy) { var n = _hra(undoline); file[undoy] = n[0], tags[undoy] = n[1] } } else if ("u" == t && undoset) { var u = term_freeze(); term_thaw(undoset), undoset = u } if ("u" == t || "U" == t) return term_scrollto(), term_redraw(), void (lastkey = void 0) } if (fakemode = !1, emacsen && a && ("x" == t || "X" == t)) t = ":", fakemode = !0, i = void 0, lastkey = void 0; else if (!l || "t" != t && "T" != t) if (!l || "s" != t && "S" != t) { if (l && ("k" == t || "K" == t)) return term_command(":d"), void (lastkey = void 0); if (emacsen && a && ("d" == t || "D" == t)) t = "D", fakemode = !0, i = void 0, lastkey = void 0; else if (!l || "a" != t && "A" != t) if (!l || "d" != t && "D" != t) { if (l && ("g" == t || "G" == t)) return term_command(":f"), void (lastkey = void 0); if (!l || "e" != t && "E" != t) if (emacsen && a && ("b" == t || "B" == t)) t = "b", fakemode = !0, i = void 0, lastkey = void 0; else if (emacsen && a && ("l" == t || "L" == t)) t = "e", fakemode = !0, i = void 0, lastkey = void 0; else if (emacsen && a && ("f" == t || "F" == t)) t = "w", fakemode = !0, i = void 0, lastkey = void 0; else if (!l || "f" != t && "F" != t) { if (l && ("y" == t || "Y" == t)) return emacsen ? (term_command(":y"), void (lastkey = void 0)) : (accum || (accum = 1), cursory -= accum, accum = 0, term_scrollto(), term_redraw(), i = void 0, void (lastkey = void 0)); if (l && ("l" == t || "L" == t)) return term_redraw(), i = void 0, void (lastkey = void 0); if (!l || "u" != t && "U" != t) if (!l || "w" != t && "W" != t) { if (l && ("b" == t || "B" == t)) { if (!emacsen) return accum || (accum = 1), cursory -= term_rows * accum, accum = 0, term_scrollto(), term_redraw(), i = void 0, void (lastkey = void 0); t = "h", fakemode = !0, i = void 0, lastkey = void 0 } } else fakemode = !0, term_vi_set("d"), t = "b", i = void 0, lastkey = void 0; else { if (!emacsen) return accum || (accum = term_rows + 1), cursory -= parseInt(accum / 2) + 2, accum = 0, term_scrollto(), term_redraw(), i = void 0, void (lastkey = void 0); t = "u", fakemode = !0, i = void 0, lastkey = void 0 } } else { if (!emacsen) return accum || (accum = 0), cursory += term_rows * accum, accum = 0, term_scrollto(), term_redraw(), i = void 0, void (lastkey = void 0); t = "l", fakemode = !0, i = void 0, lastkey = void 0 } else { if (!emacsen) return accum || (accum = 1), cursory += accum, accum = 0, term_scrollto(), term_redraw(), i = void 0, void (lastkey = void 0); t = "$", fakemode = !0, i = void 0, lastkey = void 0 } } else { if (!emacsen) return accum || (accum = term_rows + 1), cursory += parseInt(accum / 2) + 2, accum = 0, term_scrollto(), term_redraw(), i = void 0, void (lastkey = void 0); t = "x", fakemode = !0, i = void 0, lastkey = void 0 } else t = "0", fakemode = !0, i = void 0, lastkey = void 0 } else t = "/", fakemode = !0, i = void 0, lastkey = void 0; else t = "?", fakemode = !0, i = void 0, lastkey = void 0; if (!(o >= 57373 && o <= 57376) || r) { if (!r && (o < 57373 || o > 57376)); else if (31 == o || 40 == o || 57374 == o) { if (!r) return; fakemode = !0, t = "j", i = void 0, lastkey = void 0 } else if (30 == o || 38 == o || 57373 == o) { if (!r) return; fakemode = !0, t = "k", i = void 0, lastkey = void 0 } else if (28 == o || 37 == o || 57375 == o) { if (!r) return; fakemode = !0, t = l ? "B" : "h", i = void 0, lastkey = void 0 } else if (29 == o || 39 == o || 57376 == o) { if (!r) return; fakemode = !0, t = l ? "W" : "l", i = void 0, lastkey = void 0 } else { if (33 == o) return cursory -= term_rows, term_scrollto(), term_redraw(), i = void 0, void (lastkey = void 0); if (34 == o) return cursory += term_rows, term_scrollto(), term_redraw(), i = void 0, void (lastkey = void 0); if (36 == o) l ? (i = "g", t = "g") : t = "0", fakemode = !0, i = void 0, lastkey = void 0, accum = 0; else if (35 == o) fakemode = !0, accum = 0, t = l ? "G" : "$", i = void 0, lastkey = void 0; else { if (45 == o) return fakemode = !0, 1 == mode ? mode = 2 : 2 == mode ? mode = 1 : term_setmode(1), i = void 0, lastkey = void 0, void term_redraw(); if (46 == o) fakemode = !0, t = "x", i = void 0, lastkey = void 0; else if (r && 8 != o) return } } if (term_save_undo_line(), fakemode || 0 == mode) { if (!fakemode && l) return; if ("F" == i || "T" == i || "f" == i || "t" == i) return vi_ft_reg = t, "F" == i ? term_ex_motion = term_vi_ff : "T" == i ? term_ex_motion = term_vi_tt : "f" == i ? term_ex_motion = term_vi_f : "t" == i && (term_ex_motion = term_vi_t), term_operate(), lastkey = void 0, term_scrollto(), term_redraw(), void _update_backing(); if ("m" == i) return marks[t] = cursory + base, lastkey = void 0, void (accum = 0); if ("'" == i) return term_ex_motion = function () { return cursory = marks[t], base = 0, term_scrollto(), term_redraw(), !0 }, accum || (accum = 1), void term_operate(); if ('"' == i) return lastreg = t, lastkey = void 0, void (accum = 0); if ("r" == i) { var c = cursorx + left, _ = file[cursory + base]; accum || (accum = 1); var m = ""; for (d = 0; d < accum; d++)m += t; return term_save_undo(), file[cursory + base] = _.substr(0, c) + m + _.substr(c + accum, _.length - (c + accum)), accum = 0, lastkey = void 0, term_scrollto(), term_redraw(), void _update_backing() } if (":" == t || "/" == t || "?" == t) return command = t, commandleft = 0, savex = cursorx, savey = cursory, cursorx = 1, cursory = term_rows - 1, mode = 1, term_redraw(), void term_calcx(); if ("'" == t); else if ('"' == t); else if ("." == t) term_vi_set(lastcommand), term_ex_motion = lastmotion, term_operate(); else if ("$" == t) term_ex_motion = term_vi_eol, term_operate(); else if ("%" == t) accum <= 0 ? (term_ex_motion = term_vi_bounce, term_operate()) : file.length > 0 && (base = 0, cursorx = 0, left = 0, cursory = parseInt(accum * (term_rows / (file.length + 1))), accum = 0); else if ("0" == t) accum ? accum *= 10 : (cursorx = 0, left = 0); else if ("1" == t) accum *= 10, accum++; else if ("2" == t) accum *= 10, accum += 2; else if ("3" == t) accum *= 10, accum += 3; else if ("4" == t) accum *= 10, accum += 4; else if ("5" == t) accum *= 10, accum += 5; else if ("6" == t) accum *= 10, accum += 6; else if ("7" == t) accum *= 10, accum += 7; else if ("8" == t) accum *= 10, accum += 8; else if ("9" == t) accum *= 10, accum += 9; else if ("A" == t) { _ = file[cursory + base]; cursorx = _.length, term_setmode(1), term_save_undo() } else if ("a" == t) term_setmode(1), cursorx++, term_save_undo(); else if ("B" == t) term_ex_motion = term_vi_bb, term_operate(); else if ("b" == t) term_ex_motion = term_vi_b, term_operate(); else if ("c" == t) term_vi_flag("c") ? (term_vi_set("d"), term_vi_unset("c"), savex = cursorx + left, savey = cursory + base, cursorx = 0, left = 0, term_ex_motion = term_vi_line, term_operate(), cursorx = savex - left, cursory = savey - base, term_setmode(1)) : term_vi_set("c"); else if ("C" == t) term_ex_motion = term_vi_eol, term_vi_set("d"), term_operate(), term_setmode(1); else if ("D" == t) term_ex_motion = term_vi_eol, term_vi_set("d"), term_operate(); else if ("d" == t) vselm ? (term_vi_set("d"), term_vi_unset("y"), term_select(), term_operate(), vselm = 0) : term_vi_flag("d") ? (accum++, savex = cursorx + left, savey = cursory + base, cursorx = 0, left = 0, term_ex_motion = term_vi_line, term_operate(), cursorx = savex - left, cursory = savey - base) : (term_vi_set("d"), term_vi_unset("y")); else if (">" == t || "<" == t) vselm ? (term_vi_unset("<"), term_vi_unset(">"), term_vi_set(t), term_vi_unset("d"), term_vi_unset("y"), term_operate(), vselm = 0) : term_vi_flag(t) ? (accum++, savex = cursorx + left, savey = cursory + base, cursorx = 0, left = 0, term_ex_motion = term_vi_line, term_operate(), cursorx = savex - left, cursory = savey - base, term_vi_unset("<"), term_vi_unset(">")) : (term_vi_unset("<"), term_vi_unset(">"), term_vi_set(t), term_vi_unset("d"), term_vi_unset("y")); else if ("E" == t) term_ex_motion = term_vi_ee, term_operate(); else if ("e" == t) term_ex_motion = term_vi_e, term_operate(); else if ("F" == t || "f" == t); else if ("G" == t) term_ex_motion = term_vi_eof, term_operate(); else if ("g" == t && "g" == i) term_ex_motion = term_vi_top, term_operate(); else if ("H" == t) term_ex_motion = term_vi_hh, term_operate(); else if ("h" == t) term_ex_motion = term_vi_h, term_operate(); else if ("I" == t) term_save_undo(), vselm && (term_vi_set("d"), term_vi_unset("y"), term_select(), term_operate(), vselm = 0), term_setmode(1), cursorx = 0, left = 0; else if ("i" == t) term_save_undo(), vselm && (term_vi_set("d"), term_vi_unset("y"), term_select(), term_operate(), vselm = 0), term_setmode(1); else if ("J" == t) term_save_undo(), term_justify(); else if ("j" == t) term_ex_motion = term_vi_j, term_operate(); else if ("K" == t); else if ("k" == t) term_ex_motion = term_vi_k, term_operate(); else if ("L" == t) term_ex_motion = term_vi_ll, term_operate(); else if ("l" == t) term_ex_motion = term_vi_l, term_operate(); else if ("M" == t) term_ex_motion = term_vi_mm, term_operate(); else if ("m" == t); else if ("N" == t) if ("" == lastsearch) statustext = "No previous regular expression"; else { accum || (accum = 1); var f = lastsearch; for (g = "?" == (g = lastsearch.substr(0, 1)) ? "/" : "?", d = 0; d < accum; d++)term_command(g + f.substr(1, f.length - 1)); lastsearch = f, accum = 0 } else if ("n" == t) if ("" == lastsearch) statustext = "No previous regular expression"; else { for (accum || (accum = 1), d = 0; d < accum; d++)term_command(lastsearch); accum = 0 } else "O" == t ? (cursorx = 0, left = 0, term_insert(cursory + base), term_setmode(1)) : "o" == t ? (cursory++, cursorx = 0, left = 0, term_insert(cursory + base), term_setmode(1), term_save_undo()) : "P" == t || "p" == t ? (term_save_undo(), term_paste("P" != t), accum = 0) : "R" == t ? (term_save_undo(), vselm && (term_vi_set("d"), term_vi_unset("y"), term_select(), term_operate(), vselm = 0), term_setmode(2)) : "S" == t ? (term_vi_set("d"), term_vi_unset("c"), savex = cursorx + left, savey = cursory + base, cursorx = 0, left = 0, term_ex_motion = term_vi_line, term_operate(), cursorx = savex - left, cursory = savey - base, term_setmode(1)) : "s" == t ? (term_vi_set("d"), term_vi_unset("c"), savex = cursorx + left, savey = cursory + base, term_ex_motion = term_vi_l, term_operate(), cursorx = savex - left, cursory = savey - base, term_setmode(1)) : "T" == t || "t" == t || ("V" == t || "v" == t ? vselm ? (vselm = 0, vselx = void 0, vsely = void 0) : (vselm = "v" == t ? 1 : 2, vselx = cursorx + left, vsely = cursory + base) : "W" == t ? (term_ex_motion = term_vi_ww, term_operate()) : "{" == t ? (term_ex_motion = term_vi_ob, term_operate()) : "}" == t ? (term_ex_motion = term_vi_cb, term_operate()) : "w" == t ? (term_ex_motion = term_vi_w, term_operate()) : "x" == t || "X" == t ? term_vi_set("d") ? term_vi_unset("d") : (term_vi_set("d"), term_ex_motion = "x" == t ? term_vi_l : term_vi_h, term_operate()) : "y" == t ? vselm ? (term_vi_set("y"), term_vi_unset("d"), term_select(), term_operate(), vselm = 0) : term_vi_flag("y") ? (accum++, savex = cursorx + left, savey = cursory + base, cursorx = 0, left = 0, term_ex_motion = term_vi_line, term_operate(), cursorx = savex - left, cursory = savey - base) : (term_vi_set("y"), term_vi_unset("d")) : "Z" == t && "Z" == i ? (editor_disable(!0), onExit && onExit(), accum = 0) : 27 == o || 91 == o && l ? (vselm = 0, statustext = "", mode = 0) : accum = 0); term_scrollto() } else if (27 == o || 91 == o && l) { if (vselm = 0, statustext = "", "" != command) cursorx = savex, cursory = savey; else { if (accum > 1) { var d, v; for (v = lastreg, lastreg = ".", d = 1; d < accum; d++)term_paste(!1); lastreg = v, accum = 0 } cursorx--, term_scrollto() } mode = emacsen ? 1 : 0, command = "", commandleft = 0 } else { if ("" != command) { if (10 == o || 13 == o) { cursorx = savex, cursory = savey, mode = emacsen ? 1 : 0; var g, b = command; command = "", commandleft = 0, term_command(b), "/" == (g = command.substr(0, 1)) || "?" == g ? lastsearch = b : oldcommand = b, term_scrollto() } else if (8 == o) { if (!r) return; if (command = command.substr(command, command.length - 1), --cursorx <= 0) cursorx = (y = term_cols) - 8, (commandleft -= y - 16) < 0 && (cursorx = savex, cursory = savey, mode = emacsen ? 1 : 0) } else { var y; command += t, ++cursorx >= (y = term_cols) - 8 && (cursorx = 8, commandleft += y - 16) } return term_redraw(), term_calcx(), void _update_backing() } var p = (_ = file[cursory + base] || "").substr(0, cursorx + left), h = _.substr(cursorx + left + (mode - 1)), x = _.substr(cursorx + left), k = tags[cursory + base], w = k.substr(0, cursorx + left), C = k.substr(cursorx + left + (mode - 1)), E = k.substr(cursorx + left); if (p || (p = ""), 9 == o && (t = "        "), 10 == o || 13 == o) x || (x = ""), file[cursory + base] = p, tags[cursory + base] = w, cursory++, cursorx = 0, left = 0, term_insert(cursory + base), file[cursory + base] = x, tags[cursory + base] = E, lastinsert += "\n"; else if (8 == o) { if (!r) return; file[cursory + base] = p.substr(0, p.length - 1) + x, tags[cursory + base] = w.substr(0, p.length - 1) + E, lastinsert = lastinsert.substr(0, lastinsert.length - 1), cursorx-- } else { if ("" == t) return; file[cursory + base] = p + t + h, tags[cursory + base] = w + String.fromCharCode(tagstyle) + C, lastinsert += t, cursorx += t.length } term_scrollto() } term_redraw(), _update_backing() } } function _redraw_cursor() { term_draw_cursor(!0), _update_backing() } function term_draw_cursor(e) { e && cursor._opaque ? (cursor._opaque = !1, cursor.style.color = palette[0], cursor.style.backgroundColor = palette[1]) : (cursor._opaque = !0, cursor.style.color = palette[1], cursor.style.backgroundColor = palette[0]) } function _redraw_term_force() { for (; term.firstChild;)term.removeChild(term.firstChild) } function _redraw_term() { var e, r, t, s, o, l, a = term_rows, i = term_cols, n = 0, u = "", c = new Array, _ = new Array; for (vselm && ((s = vsely - base) > (o = cursory) && (g = s, s = o, o = g), (r = vselx - left) > (t = cursorx) && (g = r, r = t, t = g)), e = 0; e < a; e++) { "", ""; var m, f, d, v, g, b = file[e + base], y = 0; if (e == a - 1) { if (cursory == e) y = commandleft, b = command, f = 0, statustext = ""; else if (emacsen) { for (b = "[" + (1 == mode ? "Ins" : "Ovr") + "] " + statustext; b.length < i;)b += " "; f = 4 } else 1 == vselm ? (f = 1, b = "-- VISUAL --", statustext = "") : 2 == vselm ? (f = 1, b = "-- VISUAL LINE --", statustext = "") : 0 == mode ? (b = statustext, f = 16) : 1 == mode ? (f = 1, b = "-- INSERT --", statustext = "") : 2 == mode && (f = 1, b = "-- REPLACE --", statustext = ""); m = _mxs(b.length, f) } else if (null == b) b = "~", m = "\b"; else { y = left, m = tags[e + base]; var p = 0; for (v = b.split(/[ ,;]+/), d = 0; d < v.length; d++) { var h = v[d], x = _word(h); 0 != d && p++, h.match(/^(https?|ftp):\/\//) ? (m = m.substr(0, p) + _mxo(m.substr(p, h.length), 256 * (1 + c.length)) + m.substr(p + h.length), _[c.length] = !0, c[c.length] = h) : brokenwords[x] && !safewords[x] ? (m = m.substr(0, p) + _mxo(m.substr(p, h.length), 256 * (1 + c.length)) + m.substr(p + h.length), _[c.length] = !1, c[c.length] = h) : x.length > 3 && !_safe(x) && !safewords[x] && !spelling && (n++, u += escape("c" + n) + "=" + escape(x) + "&", spellcheck[n] = x), p += h.length } } if (null == b && (b = "", m = ""), h = 0, b = b.substr(y, b.length - y), m = m.substr(y, m.length - y), b.length >= i && (b = b.substr(0, i), m = m.substr(0, i)), vselm && (1 == vselm && s == o && s == e ? m = m.substr(0, r) + _mxo(m.substr(r, t - r + 1), 4) + m.substr(t, m.length - t - 1) : s < e && o > e || 2 == vselm && s <= e && o >= e ? m = _mxo(m, 4) : s < e && o == e ? (l = o == cursory ? cursorx : vselx - left, m = _mxo(m.substr(0, l + 1), 4) + m.substr(l, m.length - l - 1)) : s == e && o > e && (l = s == cursory ? cursorx : vselx - left, m = m.substr(0, l) + _mxo(m.substr(l, m.length - l), 4))), v = 0, m += "ÿ", b = (b += " ").replace(/ /g, " "), term.childNodes.length > e) { if ((g = term.childNodes[e])._cachex == b && g._cacheg == m) { e == cursory && _calcy(g, b, m); continue } if (term.childNodes.length > e + 1) { var k = term.childNodes[e + 1]; if (k._cachex == b && k._cacheg == m) { term.removeChild(k), term.replaceChild(k, g), k.nextSibling ? term.insertBefore(g, k.nextSibling) : term.appendChild(g), e == cursory && _calcy(k, b, m); continue } } for (; g.firstChild;)g.removeChild(g.firstChild) } else (g = document.createElement("PRE")).style.display = "block", g.style.fontFamily = "monospace", g.style.fontSize = "100%", _zmp(g), g.style.marginBottom = "1px"; f = 255; var w = g; for (d = 0; d < b.length; d++) { var C = m.charCodeAt(d); if (C != f) { if (d != v && w) (A = b.substr(v, d - v)) || (A = ""), w.appendChild(document.createTextNode(A)), g != w && g.appendChild(w), v = d; if (C > 255) { var E = parseInt(C / 256) - 1; w = document.createElement("A"), _[E] ? (w.style.borderBottom = "1px double blue", w.href = c[E], w.target = "_new", w.ondblclick = _openurl) : (w.style.borderBottom = "1px dashed red", w.href = "javascript:void(0)", w.ondblclick = _suggest), w._term = _word(c[E]), w._len = c[E].length, w._row = e + base, w._col = d + y, w.onclick = _subclick } else w = document.createElement("SPAN"); 255 == C && (C = 0), w.style.fontWeight = 1 & C ? "bold" : "normal", w.style.textDecoration = 2 & C ? "underline" : "none", 4 & C ? (w.style.color = palette[1], w.style.backgroundColor = palette[0]) : (w.style.color = palette[0], w.style.backgroundColor = palette[1]), 8 & C && (w.unselectable = !0, w.setAttribute && w.setAttribute("unselectable", "on"), w.style.color = palette[0], w.style.backgroundColor = palette[1], w.style.userSelect = "none", w.style["-moz-user-select"] = "none"), w.style.fontStyle = 16 & C ? "italic" : "normal", f = C } } if (d != v) { var A = b.substr(v, d - v - 1); w.appendChild(document.createTextNode(A)), g != w && g.appendChild(w), v = d } if (w.appendChild(document.createTextNode(" ")), g._cachex = b, g._cacheg = m, term.childNodes.length <= e && term.appendChild(g), 1 == e) { for (var S = g, I = 0; S && S != document.body;)I += S.offsetTop, S = S.offsetParent; I != line_height && (line_height = I, term_resize()) } e == cursory && _calcy(g, b, m), w = void 0 } for (; term.childNodes.length > a;)term.removeChild(term.lastChild); if (g = void 0, !spelling && n > 0 && spell_script) { spelling = !0; var T = _xhttp(); u = u.substr(0, u.length - 1), T.open("GET", spell_script + "?" + u, !0), T.onreadystatechange = function () { if (4 == T.readyState) { var e, r = T.responseText.split("\n"); for (e = 0; e < r.length; e++) { var t, s, o = r[e].split("=", 2); if (2 == o.length ? (t = o[0], s = o[1]) : 1 == o.length ? (t = o[0], s = "") : (t = r[e], s = ""), "c" == t.substr(0, 1)) { t = t.substr(1, t.length - 1); var l = spellcheck[t]; null == s || "" == s ? (brokenwords[l] = !0, suggestions[l] = new Array) : s == l ? safewords[l] = !0 : (safewords[s] = !0, suggestions[l] || (suggestions[l] = new Array), suggestions[l][suggestions[l].length] = s, brokenwords[l] = !0) } } spelling = !1, window.setTimeout(term_redraw, 10), T = void 0 } }, T.send(void 0) } _update_backing() } function _redraw_term_back() { drawiv = void 0, _redraw_term(), term_draw_cursor() } function term_redraw() { drawiv && window.clearTimeout(drawiv), drawiv = window.setTimeout(_redraw_term_back, 10) } function term_resize() { var e = term.offsetHeight, r = line_height; line_height || (r = cursor.offsetHeight - 1); var t = e / r; term_rows = parseInt(t), term_win_height = e, t = (e = term.offsetWidth) / (r = term_cur_width + 1), term_cols = parseInt(t), term_win_width = e, term_redraw() } function editor_disable(e) { var r; for (cursoriv && (window.clearInterval(cursoriv), cursoriv = void 0), _cbrestore(), term._formelement && (e && (term._formelement.value = term_freeze()), term._formelement = void 0), backing.removeEventListener && (backing.removeEventListener("DOMAttrModified", _backing_paste, !1), backing.removeEventListener("Input", _backing_paste, !1), backing.removeEventListener("input", _backing_paste, !1)), backing.oninput = void 0, backing.onInput = void 0, editor_wrapper.parentNode.removeChild(editor_wrapper), r = document.body.firstChild; r; r = r.nextSibling)r.tagName && r._flipe && (r.style.display = r._orige); backing.blur && backing.blur(), backing.style.display = "none", document.body.focus && document.body.focus(), document.focus && document.focus(), document.body.style.overflow = "" } function _cursor_fix() { term_cur_width = cursor.getBoundingClientRect().width } function _zmp(e) { e.style.marginTop = "0px", e.style.marginLeft = "0px", e.style.marginRight = "0px", e.style.marginBottom = "0px", e.style.paddingTop = "0px", e.style.paddingLeft = "0px", e.style.paddingRight = "0px", e.style.paddingBottom = "0px" } return function (e, r) { if (term && term._formelement && term._formelement != e && editor_disable(!1), r && ("function" == typeof r.onSave && (onSave = r.onSave), "function" == typeof r.onExit && (onExit = r.onExit)), r && r.spell_script && (spell_script = r.spell_script), term || (term = document.createElement("DIV"), suggest = document.createElement("DIV"), backing = document.createElement("TEXTAREA"), cursor = document.createElement("DIV"), (editor_wrapper = document.createElement("DIV")).setAttribute("class", "vi-editor")), cursor.className = "editorcursor", term.className = "editor", suggest.style.position = "absolute", suggest.style.display = "none", backing.tabIndex = -1, backing.style.position = "absolute", backing.style.bottom = "0px", backing.style.right = "0px", backing.style.width = "1px", backing.style.height = "1px", backing.style.visibility = "hidden", backing.oninput = _backing_paste, backing.onInput = _backing_paste, backing.addEventListener && (backing.addEventListener("DOMAttrModified", _backing_paste, !1), backing.addEventListener("Input", _backing_paste, !1), backing.addEventListener("input", _backing_paste, !1)), editor_wrapper.addEventListener && editor_wrapper.addEventListener("DOMMouseScroll", _mousescroll, !1), cursor.onclick = _pass_click, cursor.ondblclick = _pass_dblclick, editor_wrapper.appendChild(suggest), editor_wrapper.appendChild(term), once && editor_wrapper.appendChild(backing), editor_wrapper.appendChild(cursor), e.parentNode.insertBefore(editor_wrapper, e), cursoriv = window.setInterval(_redraw_cursor, 300), term.style.position = "absolute", term.style.top = "0px", term.style.left = "0px", term.style.display = "block", term.style.overflow = "hidden", term.style.width = "100%", term.style.height = "100%", term.style.cursor = "default", term.style.fontFamily = "monospace", term.style.fontSize = "100%", _zmp(term), term._formelement = e, editor_wrapper.style.overflow = "hidden", _cbd("select", _cancel_ev), _cbd("selectstart", _cancel_ev), _cbd("keydown", term_keyfix), _cbd("keypress", term_keypress), browser.webkit && _cbd("keyup", term_keyup), _cbd("paste", _msie_paste), _cbd("click", _mouseclick), _cbd("mousedown", _mousedown), _cbd("mousemove", _mousemove), _cbd("mouseup", _mouseup), _cbd("mousewheel", _mousescroll), vselm = 0, vseld = !1, vselx = void 0, vsely = void 0, e.blur(), cursorx = 0, cursory = 0, cursor.style.position = "absolute", cursor.style.top = 0, cursor.style.left = 0, cursor.style.fontFamily = "monospace", cursor.style.fontSize = "100%", cursor.style.width = "auto", cursor.style.cursor = "default", _zmp(cursor), cursor.style.overflow = "hidden", cursor.innerHTML = "X", cursor._opaque = !1, cursor._lasty = -1, cursor._lastx = -1, cursor._lastch = "-xyz-", cursor._lastgh = 0, palette = void 0, r && r.color && r.backgroundColor) (palette = new Array)[0] = r.color, palette[1] = r.backgroundColor; else if (document.defaultView && document.defaultView.getComputedStyle) { palette = new Array; var t = document.defaultView.getComputedStyle(term, null); palette[0] = t.color, palette[1] = t.backgroundColor } else if (window.getComputedStyle) { palette = new Array; t = window.getComputedStyle(term, null); palette[0] = t.color, palette[1] = t.backgroundColor } else term.currentStyle && ((palette = new Array)[0] = term.currentStyle.color, palette[1] = term.currentStyle.backgroundColor); mode = emacsen ? 1 : 0, once = !1, backing._lastvalue = "", backing.value = "", backing.defaultValue = "", suggest._visible = !1, suggest.display = "none", file = new Array, tags = new Array; var s, o = e.value.split("\n"); for (s = 0; s < o.length; s++) { "\r" == o[s].substr(o[s].length - 1, 1) && (o[s] = o[s].substr(0, o[s].length - 1)); var l = _hra(o[s]); file[s] = l[0], tags[s] = l[1] } return e.value = term_freeze(), cursor.style.display = "inline", _cursor_fix(), window.setTimeout(term_redraw, 1), term_resize(), _cbw("resize", term_resize), _update_backing(), { freeze: term_freeze, thaw: term_thaw, setmode: term_setmode, roll_yank: term_roll_yank, justify: term_justify, vi_bb: term_vi_bb, vi_b: term_vi_b, vi_tt: term_vi_tt, vi_t: term_vi_t, vi_ff: term_vi_ff, vi_f: term_vi_f, vi_eof: term_vi_eof, vi_top: term_vi_top, vi_h: term_vi_h, vi_j: term_vi_j, vi_k: term_vi_k, vi_l: term_vi_l, vi_ll: term_vi_ll, vi_mm: term_vi_mm, vi_hh: term_vi_hh, vi_ob: term_vi_ob, vi_cb: term_vi_cb, vi_ww: term_vi_ww, vi_w: term_vi_w, vi_flag: term_vi_flag, vi_unset: term_vi_unset, vi_set: term_vi_set, vi_bounce: term_vi_bounce, vi_eol: term_vi_eol, vi_line: term_vi_line, vi_ee: term_vi_ee, vi_e: term_vi_e, vi_v: term_vi_v, vi_vv: term_vi_vv, select: term_select, indent: term_indent, unindent: term_unindent, operate: term_operate, save_undo_line: term_save_undo_line, save_undo: term_save_undo, delete: term_delete, skipreverse2: term_skipreverse2, skipforward: term_skipforward, skipbackward: term_skipbackward, search: term_search, rsearch: term_rsearch, command: term_command, calcy: term_calcy, calcx: term_calcx, scrollto: term_scrollto, insert: term_insert, paste: term_paste, keyfix: term_keyfix, keypress: term_keypress, keypress_inner: term_keypress_inner, draw_cursor: term_draw_cursor, redraw: term_redraw, resize: term_resize, disable: editor_disable } }
}();
    //# sourceMappingURL=/sm/11c91ccb38759f4d37fecfa134a4a482508c98f7eb9de4bc14bb207523fae42f.map